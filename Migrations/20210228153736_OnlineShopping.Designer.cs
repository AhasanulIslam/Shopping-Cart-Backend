// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShoppingCart.Data;

namespace OnlineShoppingCart.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210228153736_OnlineShopping")]
    partial class OnlineShopping
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("OnlineShoppingCart.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Customar", b =>
                {
                    b.Property<int>("CustomarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomarName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomarId");

                    b.ToTable("Customars");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Add")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cancle")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Delivery")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Oders");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.ProductManager", b =>
                {
                    b.Property<int>("ProductManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Access_Level")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductManagerId");

                    b.ToTable("ProductManagers");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.UserType", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Designation")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Users", b =>
                {
                    b.Property<int>("BossID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contrct")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("BossID");

                    b.HasIndex("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Cart", b =>
                {
                    b.HasOne("OnlineShoppingCart.Models.Order", "Order")
                        .WithMany("Cart")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShoppingCart.Models.Product", "Product")
                        .WithMany("Cart")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Order", b =>
                {
                    b.HasOne("OnlineShoppingCart.Models.Users", "Users")
                        .WithMany("Order")
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Users", b =>
                {
                    b.HasOne("OnlineShoppingCart.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserId");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Order", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Product", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineShoppingCart.Models.Users", b =>
                {
                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
